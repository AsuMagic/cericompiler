#pragma once

// tokeniser.h : shared definition for tokeniser.l and compilateur.cpp

enum TOKEN
{
	FEOF    = 0,
	UNKNOWN = 1,

	FIRST_KEYWORD,
	KEYWORD_BEGIN = FIRST_KEYWORD,
	KEYWORD_END,
	KEYWORD_WHILE,
	KEYWORD_FOR,
	KEYWORD_TO,
	KEYWORD_DO,
	KEYWORD_IF,
	KEYWORD_THEN,
	KEYWORD_ELSE,
	KEYWORD_DISPLAY,
	KEYWORD_VAR,
	KEYWORD_TYPE,
	KEYWORD_CONVERT,
	KEYWORD_FFI,
	LAST_KEYWORD = KEYWORD_FFI,

	FIRST_TYPE,
	TYPE_INTEGER = FIRST_TYPE,
	TYPE_DOUBLE,
	TYPE_BOOLEAN,
	TYPE_CHAR,
	LAST_TYPE = TYPE_CHAR,

	VOID,

	FIRST_ADDOP,
	ADDOP_ADD = FIRST_ADDOP,
	ADDOP_SUB,
	ADDOP_OR,
	LAST_ADDOP = ADDOP_OR,

	FIRST_MULOP,
	MULOP_MUL = FIRST_MULOP,
	MULOP_DIV,
	MULOP_MOD,
	MULOP_AND,
	LAST_MULOP = MULOP_AND,

	FIRST_RELOP,
	RELOP_EQU = FIRST_RELOP,
	RELOP_DIFF,
	RELOP_INF,
	RELOP_SUP,
	RELOP_INFE,
	RELOP_SUPE,
	LAST_RELOP = RELOP_SUPE,

	CHAR_LITERAL,
	FLOAT_LITERAL,
	INTEGER_LITERAL,
	ID,
	STRINGCONST,
	RBRACKET,
	LBRACKET,
	LPARENT,
	RPARENT,
	COMMA,
	COLON,
	SEMICOLON,
	DOT,
	NOT,
	ASSIGN,
	EQUAL
};

[[nodiscard]] bool is_token_keyword(TOKEN token);
[[nodiscard]] bool is_token_type(TOKEN token);
[[nodiscard]] bool is_token_addop(TOKEN token);
[[nodiscard]] bool is_token_mulop(TOKEN token);
[[nodiscard]] bool is_token_relop(TOKEN token);
